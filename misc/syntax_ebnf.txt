(* terminals *)
identifier = ? any identifier emitted by lexer (a single letter optionally followed by more letters, digits, '_' or '$') ?;
literal = ? any literal emitted by lexer (string, numeric, boolean, nil and unit) ?;
(* important: symbols and keywords (most string constants on this file) are also tokenized but not described here for brevity *)
(* notice: lexer will remove comments automatically, this may change in future to allow semantic comments *)
(* notice: lexer will automatically detect when a space and a new line are required, so we ignore them on the parser *)

(* args and lookups *)
calling_args = "(", [expr, {",", expr}, [","]], ")";
indexing_args = "[", [expr, {",", expr}, [","]], "]";

(* expressions *)
expr = cast_expr
cast_expr = log_or_expr { "as", log_or_expr };
log_or_expr = log_and_expr, { "||", log_and_expr };
log_and_expr = rel_expr, { "&&", rel_expr };
rel_expr = cmp_expr, { "==", cmp_expr | "!=", cmp_expr };
cmp_expr = bit_and_expr, { ">", bit_and_expr | "<", bit_and_expr | ">=", bit_and_expr | "<=", bit_and_expr };
bit_or_expr = bit_and_expr, { "|", bit_and_expr | "^" bit_and_expr };
bit_and_expr = bit_shift_expr, { "&", bit_shift_expr };
bit_shift_expr = fact_expr, { ">>", term_expr | "<<", term_expr};
term_expr = fact_expr, { "+", fact_expr | "-", fact_expr };
fact_expr = ref_expr, { "*", ref_expr | "/", ref_expr | "%", ref_expr };
ref_expr = { "&" }, proof_expr;
proof_expr = static_lookup_expr, { ":", unary_expr };
unary_expr = {"+" | "-" | "!" | "~"}, subscription_expr;
subscription_expr = value_lookup_expr, { calling_args | indexing_args };
value_lookup_expr = static_lookup_expr, { "." static_lookup_expr };
static_lookup_expr = primary_expr, { "::" primary_expr };
primary_expr = "(" expr ")" | atom;
atom = identifier | literal;

(* statements *)
return_stmt = "return" expr;
continue_stmt = "continue";
break_stmt = "break";
if_stmt = "if" main_branch, {elif_branch}, [else_branch];
main_branch = expr_with_block;
elif_branch = "elif", expr_with_block;
else_branch = "else", block;
while_stmt = "while", expr_with_block;
assign_stmt = subscription_stmt, ("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | ">>=" | "<<="), expr;
subscription_stmt = subscription_expr;

(* bindings *)
type_bind = ":", expr;
data_bind = "=", expr;

(* code block *)
statement_or_decl = statement | decl;
block = "{", { statement_or_decl, eol }, "}";
expr_with_block = expr, block;

(* deconstruction *)
let_deconstruction = identifier, type_bind;
proc_signature = formal_arg_list, type_bind;
formal_args = "(", [formal_arg, {",", formal_arg}, [","]], ")";
formal_arg = arg_bind ",";
arg_bind = identifier, type_bind;
proc_deconstruction = identifier, proc_signature;
type_deconstruction = identifier;

(* root declarations *)
module_decl = "module", static_lookup_expr;

(* declarations *)
prototype_suffix = "prototype";
let_decl = "let", let_deconstruction, (prototype_suffix | data_bind);
proc_decl = "proc", proc_deconstruction, (prototype_suffix | data_bind | block);
type_decl = "type", type_deconstruction, (prototype_suffix | data_bind);
extern_decl = "extern", ( let_decl | proc_decl | type_decl );
decl = module_decl | let_decl | proc_decl;
decls = { decl, eol };

(* compilation_unit *)
compilation_unit = module_decl, eol, decls, eof;